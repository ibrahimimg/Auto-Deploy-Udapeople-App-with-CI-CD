version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id: 
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> "
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
  
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id: 
        type: string    
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl https://kvdb.io/N87wVZoScJSR7ony7eAk5e/migration_<<parameters.workflow_id>>)
            echo "$SUCCESS"
            if(( $SUCCESS==1 )); 
            then
              cd backend
              npm install
              npm run migrations:revert
            fi
            
      
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Test back-end
          command: |
            cd backend
            npm install
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Scan front-end dependencies
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Scan back-end dependencies
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            yum install -y tar gzip
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            yum install -y tar gzip
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text | tail -n 1 >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   
  
  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["a4c:06:21:47:16:2f:5e:ec:9e:aa:35:7c:56:9c:f8:d9"] 
      # attach workspace
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update aws-cli
      - run:
          name: Configure server
          command: |
            pwd
            # add ENV VAR to backend server
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION > backend/.env 
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> backend/.env 
            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env 
            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env 
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env 
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env 
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env 
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> backend/.env 
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> backend/.env 
            echo NODE_ENV=production >> backend/.env 
            
            cat backend/.env 
            [ -r .circleci/ansible/inventory.txt ] && cat .circleci/ansible/inventory.txt
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      
      - persist_to_workspace:
          root: .
          paths:
            - backend/.env 
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  
  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: cimg/node:13.8.0
      # - image: sleavely/node-awscli:14.x
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Run migrations
          command: |
            # add ENV VAR to backend server
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION > backend/.env 
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> backend/.env 
            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env 
            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env 
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env 
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env 
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env 
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> backend/.env 
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> backend/.env 
            echo NODE_ENV=production >> backend/.env 
            cd backend
            cat .env
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
            cat  backend/migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            cat backend/migrations_dump.txt
            cat backend/.env
            if grep -q "has been executed successfully" backend/migrations_dump.txt
            then
              curl https://kvdb.io/N87wVZoScJSR7ony7eAk5e/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      - image: sleavely/node-awscli:14.x
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            #curl -sL https://rpm.nodesource.com/setup_13.x | sudo bash -
            #yum install nodejs
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text | tail -n 1)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            ls dist
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: .
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["a4c:06:21:47:16:2f:5e:ec:9e:aa:35:7c:56:9c:f8:d9"] 

      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update aws-cli
            apk add --update nodejs npm
            apk add curl  

      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            # Zip the directory
            cat backend/.env
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update aws-cli
            apk add --update nodejs npm
            apk add curl
      - run:
          name: Get backend url
          command: |
            # Fetch and prepare the BACKEND_IP env var
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text | tail -n 1)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "Backend URL is ------"
            echo "${API_URL}"
              
      - run:
          name: Backend smoke test
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text | tail -n 1)
            export API_URL="http://${BACKEND_IP}:3030"
            if curl "${API_URL}/api/status" | grep "ok"
              then
                return 0
              else
                return 1
            fi
      - run:
          name: Frontend smoke test
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo "Frontend URL is ------"
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
              then
                return 0
              else
                return 1
            fi
      # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
    
  cloudfront-update:
    docker:
      - image: sleavely/node-awscli:14.x
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            echo ""
            # echo "Installing dependencies"
            # yum install -y tar gzip
            
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # Fetch the Old workflow ID
            export OldWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"

            # Export the Current workflow ID
            export CurrentWorkflowID=${CIRCLE_WORKFLOW_ID:0:7}
            echo CurrentWorkflowID: "${CurrentWorkflowID}"
      - run:
          name: Remove old stacks and files
          command: |
            MyOldWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${MyOldWorkflowID}" ]]
              then
                echo "============DELETE==========="
                echo "Current workflow ID is ${CIRCLE_WORKFLOW_ID:0:7} and Old workflow ID is ${MyOldWorkflowID}"
                echo "Old Resources will be deleted!..."
                aws s3 rm "s3://udapeople-${MyOldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${MyOldWorkflowID}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${MyOldWorkflowID}"
              else
                echo "=============PASS============"
                echo "Nothing to delete as ${CIRCLE_WORKFLOW_ID:0:7} = ${MyOldWorkflowID}"
            fi


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
      